{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master PC\\\\Desktop\\\\NEW3\\\\crud\\\\reactfront\\\\src\\\\components\\\\EditCategory.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const endpoint = 'http://localhost:8000/api';\n// const categoryEndpoint = `${endpoint}/categories`;\n\n// const EditCategory =  ({ categoryId }) => {\n//   const [name, setName] = useState('');\n//   const [isCategoryUpdated, setIsCategoryUpdated] = useState(false);\n//   const { id } = useParams();\n\n//   const updateCategory = async (e) => {\n//     e.preventDefault();\n\n//     const response = await fetch(`${categoryEndpoint}/${categoryId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ name }),\n//     });\n\n//     if (!response.ok) {\n//       console.error(`HTTP error! Status: ${response.status}`);\n//       return;\n//     }\n\n//     setIsCategoryUpdated(true);\n//       setTimeout(() => window.location.reload(), 1500);\n\n//   };\n\n//   useEffect(() => {\n//     const getCategoryById = async () => {\n//       try {\n//         const response = await fetch(`${categoryEndpoint}/${categoryId}`);\n\n//   console.log(response);\n//         if (!response.ok) {\n//           console.error(`HTTP error! Status: ${response.status}`);\n//           return;\n//         }\n\n//         const data = await response.json();\n\n//         console.log('Response data:', data);\n\n//         if (data) {\n//           setName(data.name);\n//         } else {\n//           console.error('Empty or invalid JSON response.');\n//         }\n//       } catch (error) {\n//         console.error('Error fetching category:', error);\n//       }\n//     };\n\n//     getCategoryById();\n//   }, [id]);\n\n//   return (\n//     <div>\n//       <h3>Edit Category</h3>\n//       {isCategoryUpdated && (\n//         <p style={{ color: 'green' }}>Category updated successfully!</p>\n//       )}\n//       <form onSubmit={updateCategory}>\n//         <div>\n//           <label>Name</label>\n//           <br></br>\n//           <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n//         </div>\n//         <br></br>\n//         <button type=\"submit\">Edit</button>\n//       </form>\n//       <br></br>\n\n//     </div>\n//   );\n// };\n\n// export default EditCategory;\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst endpoint = 'http://localhost:8000/api';\nconst categoryEndpoint = `${endpoint}/categories`;\nconst EditCategory = ({\n  categoryId\n}) => {\n  _s();\n  const [name, setName] = useState('');\n  const [isCategoryUpdated, setIsCategoryUpdated] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const {\n    id\n  } = useParams();\n  const updateCategory = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`${categoryEndpoint}/${categoryId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name\n        })\n      });\n      let data = {}; // Inicializamos data como un objeto vacÃ­o\n\n      try {\n        data = await response.json();\n      } catch (jsonError) {\n        console.error('Error parsing JSON:', jsonError);\n      }\n      if (response.ok) {\n        // Caso exitoso\n        console.log(`Success message from server: ${data.message}`);\n        setIsCategoryUpdated(true);\n      } else {\n        // Caso de error\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.error(`Error message from server: ${data.error}`);\n        setErrorMessage('Error updating category. Please try again.');\n      }\n    } catch (error) {\n      // Error en la solicitud\n      console.error('Error during fetch:', error);\n      setErrorMessage('Error updating category. Please try again.');\n    }\n  };\n  useEffect(() => {\n    const getCategoryById = async () => {\n      try {\n        const response = await fetch(`${categoryEndpoint}/${categoryId}`);\n        if (!response.ok) {\n          console.error(`HTTP error! Status: ${response.status}`);\n          return;\n        }\n        const data = await response.json();\n        console.log('Response data:', data);\n        if (data) {\n          setName(data.name);\n        } else {\n          console.error('Empty or invalid JSON response.');\n        }\n      } catch (error) {\n        console.error('Error fetching category:', error);\n      }\n    };\n    getCategoryById();\n  }, [categoryId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Edit Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), isCategoryUpdated && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green'\n      },\n      children: \"Category updated successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateCategory,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: name,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(EditCategory, \"8Lzmv+ciU3ZOGpxnKli0y002qbI=\", false, function () {\n  return [useParams];\n});\n_c = EditCategory;\nexport default EditCategory;\nvar _c;\n$RefreshReg$(_c, \"EditCategory\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","endpoint","categoryEndpoint","EditCategory","categoryId","_s","name","setName","isCategoryUpdated","setIsCategoryUpdated","errorMessage","setErrorMessage","id","updateCategory","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","jsonError","console","error","ok","log","message","status","getCategoryById","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/Master PC/Desktop/NEW3/crud/reactfront/src/components/EditCategory.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const endpoint = 'http://localhost:8000/api';\r\n// const categoryEndpoint = `${endpoint}/categories`;\r\n\r\n// const EditCategory =  ({ categoryId }) => {\r\n//   const [name, setName] = useState('');\r\n//   const [isCategoryUpdated, setIsCategoryUpdated] = useState(false);\r\n//   const { id } = useParams();\r\n\r\n//   const updateCategory = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const response = await fetch(`${categoryEndpoint}/${categoryId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify({ name }),\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       console.error(`HTTP error! Status: ${response.status}`);\r\n//       return;\r\n//     }\r\n\r\n//     setIsCategoryUpdated(true);\r\n//       setTimeout(() => window.location.reload(), 1500);\r\n\r\n  \r\n//   };\r\n\r\n\r\n//   useEffect(() => {\r\n//     const getCategoryById = async () => {\r\n//       try {\r\n//         const response = await fetch(`${categoryEndpoint}/${categoryId}`);\r\n\r\n//   console.log(response);\r\n//         if (!response.ok) {\r\n//           console.error(`HTTP error! Status: ${response.status}`);\r\n//           return;\r\n//         }\r\n  \r\n//         const data = await response.json();\r\n  \r\n//         console.log('Response data:', data);\r\n  \r\n//         if (data) {\r\n//           setName(data.name);\r\n//         } else {\r\n//           console.error('Empty or invalid JSON response.');\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error fetching category:', error);\r\n//       }\r\n//     };\r\n  \r\n//     getCategoryById();\r\n//   }, [id]);\r\n  \r\n\r\n//   return (\r\n//     <div>\r\n//       <h3>Edit Category</h3>\r\n//       {isCategoryUpdated && (\r\n//         <p style={{ color: 'green' }}>Category updated successfully!</p>\r\n//       )}\r\n//       <form onSubmit={updateCategory}>\r\n//         <div>\r\n//           <label>Name</label>\r\n//           <br></br>\r\n//           <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n//         </div>\r\n//         <br></br>\r\n//         <button type=\"submit\">Edit</button>\r\n//       </form>\r\n//       <br></br>\r\n      \r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EditCategory;\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst endpoint = 'http://localhost:8000/api';\r\nconst categoryEndpoint = `${endpoint}/categories`;\r\n\r\nconst EditCategory = ({ categoryId }) => {\r\n  const [name, setName] = useState('');\r\n  const [isCategoryUpdated, setIsCategoryUpdated] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const { id } = useParams();\r\n\r\n  const updateCategory = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch(`${categoryEndpoint}/${categoryId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name }),\r\n      });\r\n\r\n      let data = {}; // Inicializamos data como un objeto vacÃ­o\r\n\r\n      try {\r\n        data = await response.json();\r\n      } catch (jsonError) {\r\n        console.error('Error parsing JSON:', jsonError);\r\n      }\r\n\r\n      if (response.ok) {\r\n        // Caso exitoso\r\n        console.log(`Success message from server: ${data.message}`);\r\n        setIsCategoryUpdated(true);\r\n      } else {\r\n        // Caso de error\r\n        console.error(`HTTP error! Status: ${response.status}`);\r\n        console.error(`Error message from server: ${data.error}`);\r\n        setErrorMessage('Error updating category. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      // Error en la solicitud\r\n      console.error('Error during fetch:', error);\r\n      setErrorMessage('Error updating category. Please try again.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCategoryById = async () => {\r\n      try {\r\n        const response = await fetch(`${categoryEndpoint}/${categoryId}`);\r\n\r\n        if (!response.ok) {\r\n          console.error(`HTTP error! Status: ${response.status}`);\r\n          return;\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        console.log('Response data:', data);\r\n\r\n        if (data) {\r\n          setName(data.name);\r\n        } else {\r\n          console.error('Empty or invalid JSON response.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching category:', error);\r\n      }\r\n    };\r\n\r\n    getCategoryById();\r\n  }, [categoryId]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Edit Category</h3>\r\n      {isCategoryUpdated && (\r\n        <p style={{ color: 'green' }}>Category updated successfully!</p>\r\n      )}\r\n      {errorMessage && (\r\n        <p style={{ color: 'red' }}>{errorMessage}</p>\r\n      )}\r\n      <form onSubmit={updateCategory}>\r\n        <div>\r\n          <label>Name</label>\r\n          <br></br>\r\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n        </div>\r\n        <br></br>\r\n        <button type=\"submit\">Edit</button>\r\n      </form>\r\n      <br></br>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditCategory;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}